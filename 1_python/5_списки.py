'''

_____________________ СПИСКИ (Массивы) ________________________

    mylist = []         - пустой список
    mylist = list()     - тоже пустой список


    info = ['Timur', 1992, 61.5]       - может содержать значения разных типов данных:
    info[0] == 'Timur';
    print(info)                -  вывод списка



    list() -  преобразовать некоторые типы объектов в списки.

        numbers = list(range(5))                        [0, 1, 2, 3, 4]
        ven_numbers = list(range(0, 10, 2))             [0, 2, 4, 6, 8]

        s = 'abcde'
        chars = list(s)                         ['a', 'b', 'c', 'd', 'e']







_____________________ ИНДЕКСАЦИЯ И СРЕЗЫ ________________________

    Аналогично строкам

    numbers = [2, 4, 6, 8, 10]

    len(numbers)        - 5, длина списка
    2 in numbers        - оператор in
    0 not in numbers    - оператор not in
    numbers[1]	        - 4, индексация сначала
    numbers[-1]         - 10, индексация сконца
    numbers[1:3]        - [4, 6]  - срез , 1-включительно, 3 - не включительно
    sum(numbers)        - сумма элементов
    min(numbers)        - минимальный элемент
    max(numbers)        - максимальный элемент




    Использование срезов для изменения элементов в заданном диапазоне

            s[1] = 'x'           - ошибка,   строки — неизменяемые объекты!
            numbers[1] = 101     - изменяется,  списки – изменяемые объекты! (не добавляет!)


                fruits =        ['apple', 'apricot', 'banana', 'cherry', 'kiwi', 'lemon', 'mango']
                fruits[2:5] =   ['банан', 'вишня', 'киви']
                fruits     -    ['apple', 'apricot', 'банан', 'вишня', 'киви', 'lemon', 'mango']




    Операторы  +   и   *

        [1, 2, 3, 4]     +    [5, 6, 7, 8]       -   [1, 2, 3, 4, 5, 6, 7, 8]
        [7, 8]   *   3                           -   [7, 8, 7, 8, 7, 8]
        [0]   *  10                              -   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]







_____________________ ВЫВОД ЭЛЕМЕНТОВ СПИСКА ________________________


    1. Вывод списка с помощью for

                numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

                for i in range(len(numbers)):
                    print(numbers[i])

                for num in numbers:
                     print(num, end=' ')





    2. Вывод списка с помощью распаковки

                numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

                print(*numbers)                  - 0 1 2 3 4 5 6 7 8 9 10
                print(*numbers, sep='\n')










_____________________ МЕТОДЫ СПИСКОВ ________________________

        1) добавление

                numbers.append(21)      - добавление
                numbers.extend(odds)    - расширение  (!!при добавлении строк, разбивает на символы!!)

                    numbers = [0, 2, 4, 6, 8, 10]
                    odds = [10, 3, 5, 7]
                    numbers.extend(odds)                    - [0, 2, 4, 6, 8, 10, 10, 3, 5, 7]



                    words1 = ['iq option', 'stepik', 'beegeek']
                    words2 = ['iq option', 'stepik', 'beegeek']

                    words1.append('python')                             - ['iq option', 'stepik', 'beegeek', 'python']
                    words2.extend('python')                             - ['iq option', 'stepik', 'beegeek', 'p', 'y', 't', 'h', 'o', 'n']






        2) удаление

                numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                del numbers[5]                  - удаляем элемент имеющий индекс 5, список перестраивается    [1, 2, 3, 4, 5, 7, 8, 9]
                del numbers[2:7]                - удаляем элементы с 2 по 6 включительно   [1, 2, 8, 9]
                del numbers[::2]                - удаляем четные индексы  [2, 4, 6, 8]






        3)  insert( index, value )              - позволяет вставлять значение в список в заданной позиции

                index         - индекс, задающий место вставки значения
                value         - значение, которое требуется вставить


                        Если указан недопустимый индекс, то во время выполнения программы не происходит ошибки.
                        Если задан индекс за пределами конца списка, то значение будет добавлено в конец списка.
                        Если применен отрицательный индекс, который указывает на недопустимую позицию, то значение будет вставлено в начало списка.



                names = ['Anders', 'Gvido', 'Roman' , 'Timur']
                names.insert(3, 'Josef')                                 - ['Anders', 'Gvido', 'Roman' , 'Josef', 'Timur']







        4)   index(  value )              - возвращает индекс первого элемента, значение которого равняется переданному в метод значению

                value         - значение, индекс которого требуется найти


                            names = ['Gvido', 'Roman' , 'Timur']
                            if 'Timur' in names:
                                position = names.index('Timur')
                                print(position)                                           - 2 , если не найдет, вернет ошибку, поэтому оборачиваем в if
                            else:
                                print('Такого значения нет в списке')







        5)   remove( value )              -  удаляет первый элемент, значение которого равняется переданному в метод значению

                value         - значение, которое требуется удалить.


                        Если элемент в списке не найден, то во время выполнения происходит ошибка.


                food = ['Рис', 'Курица', 'Рыба', 'Брокколи', 'Рис']
                print(food)
                food.remove('Рис')                                - ['Курица', 'Рыба', 'Брокколи', 'Рис']







        6)  pop( index )              -  удаляет элемент по указанному индексу и возвращает его

                index         - индекс элемента, который требуется удалить


                        Если индекс не указан, то метод удаляет и возвращает последний элемент списка.
                        Если список пуст или указан индекс за пределами диапазона, то во время выполнения происходит ошибка.



                names = ['Gvido', 'Roman' , 'Timur']
                item = names.pop(1)
                print(item)                                     - Roman
                print(names)                                    - ['Gvido', 'Timur']







        7)  count(  value   )              -   возвращает количество элементов в списке, значения которых равны переданному в метод значению

                value         - значение, количество элементов, равных которому,  нужно посчитать

                        Если значение в списке не найдено, то метод возвращает 0.



                names = ['Timur', 'Gvido', 'Roman', 'Timur', 'Anders', 'Timur']
                names.count('Timur')                                                            - 3






        8)  reverse()             -   инвертирует порядок следования значений в списке


                       Метод reverse() меняет порядок элементов на обратный в ТЕКУЩЕМ списке.
                       А срез создает копию списка, в котором элементы следуют в обратном порядке.


                names = ['Gvido', 'Roman' , 'Timur']
                names.reverse()                                                   -  ['Timur', 'Roman', 'Gvido']





         9)  clear()             -   удаляет все элементы из списка






        10)  copy()              -   создает поверхностную копию списка

                names = ['Gvido', 'Roman' , 'Timur']
                names_copy = names.copy()


                Аналогичного результата можно достичь с помощью срезов или функции list():

                    names = ['Gvido', 'Roman' , 'Timur']
                    names_copy1 = list(names)             # создаем поверхностную копию с помощью функции list()
                    names_copy2 = names[:]                # создаем поверхностную копию с помощью среза от начала до конца




        11)  sort()              -   сортирует элементы списка по возрастанию или убыванию.

                a.sort(reverse=True)  - сортируем по убыванию
                строки сортируются -  https://ru.wikipedia.org/wiki/Лексикографический_порядок












_____________________ СПИСОЧНЫЕ ВЫРАЖЕНИЯ ________________________

        Cписочное выражение (list comprehension) -  механизм для создания списков из неповторяющихся элементов (более короткая запись)


        Одно и то же:
                    numbers = [i for i in range(10)]

                    numbers = []
                    for i in range(10):
                        numbers.append(i)




        Синтаксис:

            [выражение        for переменная in последовательность]

                    переменная          — имя некоторой переменной
                    последовательность  — последовательность значений, которые она принимает (список, строка или объект, полученный при помощи функции range)
                    выражение           — некоторое выражение, как правило, зависящее от использованной в списочном выражении переменной, которым будут заполнены элементы списка.





        1) Считывание входных данных - сразу заполнем список при вводе

                Одно и то же:

                        n = int(input())
                        lines = [int(input())   for _ in range(n)]

                        numbers = [int(input())   for _ in range(int(input()))]





        2) Условия в списочном выражении
                    evens = [i for i in range(21) if i % 2 == 0]        - четные




        3) Вложенные циклы

                    numbers = [i * j for i in range(1, 5) for j in range(2)]

                    print(numbers)  [0, 1, 0, 2, 0, 3, 0, 4]



                    То же самое, что:
                            numbers = []

                            for i in range(1, 5):
                                for j in range(2):
                                    numbers.append(i * j)
                            print(numbers)





        4) Примеры

                    numbers = [1, 14, 5, 9, 12]
                    word = 'Hello'
                    words = ['one', 'two', 'three', 'four', 'five', 'six'].


                    Списочное выражение	                        Результирующий список
                    [0 for i in range(10)]	                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                    [i ** 2 for i in range(1, 8)]	            [1, 4, 9, 16, 25, 36, 49]
                    [i * 10 for i in numbers]	                [10, 140, 50, 90, 120]
                    [c * 2 for c in word]	                    ['HH', 'ee', 'll', 'll', 'oo']
                    [m[0] for m in words]	                    ['o', 't', 't', 'f', 'f', 's']
                    [i for i in numbers if i < 10]	            [1, 5, 9]
                    [m[0] for m in words if len(m) == 3]	    ['o', 't', 's']




'''