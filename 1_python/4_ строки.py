'''

_____________________ СТРОКОВЫЙ ТИП ДАННЫХ ________________________


    len('Python rocks!')     - Длина строки
    str(17.77)               - Преобразование чисел в строку
    s1 = 'ab' + 'bc'         - Конкатенация строк
    s = 'Hi' * 4             - Результат HiHiHiHi
    'ab' in 'abc'            - Вхождение подстроки (чувствительно к регистру)
    print(*s, sep='\n')      - Вывод строки с помощью распаковки (каждый символ на отдельной строке)




    Тройные кавычки для многострочного текста.

    text = \'''Python is an interpreted, high-level, general-purpose programming language.
    Created by Guido van Rossum and first released in 1991, Python design
    philosophy emphasizes code readability with its notable use of significant whitespace.\'''


    Индексация строк

        Положительные индексы	 0	 1	 2	 3	 4	 5
        Строка	                 P	 y	 t	 h	 o	 n
        Отрицательные индексы	-6	-5	-4	-3	-2	-1

        отрицательные индексы строки начинаются с -1

        s[0]    P
        s[-6]	P


    Итерирование строк
        s = 'abcdef'
        for i in range(len(s)):
            print(s[i])


        s = 'abcdef'
        for c in s:         с - переменная, назвали прсосто - первая буква слова char (символ).
            print(c)

        Этот цикл пройдет по строке s, придавая переменной цикла c значение каждого символа (!) в отличие от предыдущего цикла,
        в котором переменная цикла «бегала» по индексам строки.






_____________________ СРЕЗЫ СТРОК ________________________


    Положительные индексы	    0	1	2	3	4	5	6	7	8	9
    Строка	                    a	b	c	d	e	f	g	h	i	j
    Отрицательные индексы	    -10	-9	-8	-7	-6	-5	-4	-3	-2	-1

    отрицательные индексы строки начинаются с -1



s[x:y:шаг]
    x - включительно,
    y - невключительно
    Если в качестве шага среза указать отрицательное число, то символы будут идти в обратном порядке.

        s[2:5]      от 2 до 5 (cde)
        s[2:]       от 2 до конца (cdefghij)
        s[:7]       от начала до 7 (abcdefg)
        s[:]        возвращает исходную строку.
        s[-9:-4]    (bcdef)
        s[:-1]      от начала до -1 (abcdefghi) , Удалить из строки последний символ

        s[1:7:2]   взяты индексы 1,3,5 (bdf)
        s[::-1]    Если в качестве шага среза указать отрицательное число, то символы будут идти в обратном порядке. (jihgfedcba)       (  s[9:3:-1]   )




Изменение символа строки по индексу

    В Python строки являются неизменяемыми, то есть мы не можем менять их содержимое с помощью индексатора.
    s[4] = 'X'                  - не сработает
    s = s[:4] + 'X' + s[5:]     - сработает, мы должны создать новую строку







_____________________ МЕТОДЫ СТРОК ________________________



Они не изменяют исходную строку, создаётся совсем другой объект
    1) s.capitalize()      -   1-ый символ имеет верхний регистр, а все остальные символы имеют нижний регистр.
    2) s.swapcase()        -   все символы, имеющие верхний регистр, преобразуются в символы нижнего регистра и наоборот.
    3) s.title()           -   1-ый символ каждого слова переводится в верхний регистр. Не обрабатывает аббревиатуры и апострофы, после них большая буква
    4) s.lower()           -   все символы имеют нижний регистр
    5) s.upper()           -   все символы имеют верхний регистр




        <start> - включительно
        <end>   - не включительно

    6) s.count(<sub>, <start>, <end>)       - количество непересекающихся вхождений подстроки <sub>

            s = 'foo goo moo'
            s.count('oo')        // 3



    7) s.startswith(<suffix>, <start>, <end>)   - определяет, начинается ли исходная строка s подстрокой <suffix>

            s = 'foobar'
            s.startswith('baz')  // False



    8) s.endswith(<suffix>, <start>, <end>)   - определяет, оканчивается ли исходная строка s подстрокой <suffix>

            s = 'foobar'
            s.endswith('bar')  // True



    9) s.find(<sub>, <start>, <end>)   - находит индекс первого вхождения подстроки <sub> в исходной строке s. Если не нашел, вернет "-1". Безопаснее.
       s.rfind()   - ищет с конца строки

       s.index()   - идентичен s.find().  Если не нашел, вызовет ошибку.
       s.rindex()   - ищет с конца строки

            s = 'foo bar foo baz foo qux'
            s.find('foo')  // 0



    10) s.strip()   - возвращает копию строки s, у которой удалены все пробелы, стоящие в НАЧАЛЕ и КОНЦЕ строки.
        s.lstrip()  - возвращает копию строки s, у которой удалены все пробелы, стоящие в НАЧАЛЕ строки.
        s.rstrip()  - возвращает копию строки s, у которой удалены все пробелы, стоящие в КОНЦЕ строки.

        может быть необязательный аргумент <chars> – это строка, которая определяет набор символов для удаления.




    11) s.replace(<old>, <new>, <count> )   - возвращает копию s со всеми вхождениями подстроки <old>, замененными на <new>.     <count> - количество замен.

            s = 'foo bar foo baz foo qux'
            s.replace('foo', 'grault')          // "grault bar grault baz grault qux"
            s.replace('foo', 'grault', 2)       // "grault bar grault baz foo qux"








            Классификация символов


    12) s.isalnum()   -  определяет, состоит ли исходная строка из буквенно-цифровых символов

            s = 'abc$*123'
            s.isalnum()  // False


    13) s.isalpha()   -  определяет,  состоит ли исходная строка только из буквенных символов

            s = 'abc123'
            s.isalpha()  // False


    14) s.isdigit()   -  определяет,  состоит ли исходная строка только из цифровых символов

            s = '1234567'
            s.isdigit()  // True



    15) s.islower()   -   определяет, являются ли все буквенные символы исходной строки строчными (имеют нижний регистр)

            s = 'abc1$d'
            s.islower()  // True, игнорирует все небуквенные символы.



    16) s.isupper()   -   определяет, являются ли все буквенные символы исходной строки заглавными (имеют верхний регистр)

            s = 'ABC1$D'
            s.islower()  // True, игнорирует все небуквенные символы.


    17) s.isspace()   -   определяет, состоит ли исходная строка только из пробельных символов

            s = '       '
            s.isspace()  // True










            split() и join()


    12) s.split('  разделитель  ')   -  разбивает строку по произвольному разделителю на список слов

            s = 'Python is the most powerful language'
            words = s.split()                                  - ['Python', 'is', 'the', 'most', 'powerful', 'language']


                    Если при запуске этой программы ввести строку 1 2 3 4 5, то список numbers будет следующим  ['1', '2', '3', '4', '5']
                        numbers = input().split()

                    Если требуется получить именно список чисел, то затем нужно элементы списка по одному преобразовать в числа с помощью команды int()
                        numbers = input().split()
                        for i in range(len(numbers)):
                            numbers[i] = int(numbers[i])
                        print(numbers)



            Разница методов s.split() и s.split(' ')
                s = 'I love  Python'
                words1 = s.split()                       - ['I', 'love', 'Python']
                words2 = s.split(' ')                    - ['I', 'love', '', 'Python']




    13) ' разделитель '.join( список со строками / или строка  )   -  собирает строку из списка слов через заданный разделитель

            words = ['Мы', 'учим', 'язык', 'Python']
            '*'.join(words)                                      -  Мы*учим*язык*Python



            numbers = [1, 2, 3, 4]         - список чисел, будет ошибка (элементы должны быть строкового типа)
            s = '*'.join(numbers)



            s = '+'.join('pygen')          - p+y+g+e+n  , пример join со строкой





_____________________ ФОРМАТИРОВАНИЕ СТРОК ________________________


str() - преобразует числовое значение в строку.

        birth_year = 1992
        name = 'Timur'
        profession = 'math teacher'

        text = 'My name is {}, I was born in {}, I work as a {}.'.format(name, birth_year, profession)     // Python ставит их вместо фигурных скобок {} – заполнителей
        text = 'My name is {0}, I was born in {1}, I work as a {2}.'.format(name, birth_year, profession)  // можно добавить порядковые номера  можем использовать числа в разном порядке.


f-строки (перед строкой префикс f)

    text = f'{first_name} {last_name} is a very famous singer from the {country}. She was born on {birth_date} in {birth_place}.'
    print(  f'5 + 2 = {5 + 2}'  )







Представление строк в памяти компьютера, ASCII и Unicode

    ASCII представляет собой набор из 128 цифровых кодов, которые обозначают английские буквы, различные знаки препинания и другие символы.
    Таблица символов Юникод представляет собой набор цифровых символов, которые включают в себя знаки почти всех письменных языков мира.
    Первые 128 кодов таблицы символов Unicode совпадают с ASCII.


    ord('A') -  // 65 , позволяет определить код некоторого символа в таблице символов Unicode.
    chr(65)  - // A , позволяет определить по коду символа сам символ.


    for i in range(26):
        print(chr(ord('A') + i))








_____________________ СРАВНЕНИЕ СТРОК ________________________
 ( в соответствии с кодами составляющих их символов в таблице Unicode. )


Сравнение строк единичной длины
    https://www.asciitable.com/

    print('a' > 'b')    // False    print(ord('a') > ord('b'))
    print('a' < 'z')    // True     print(ord('a') < ord('z'))




Сравнение строк не единичной длины

    Алгоритм сравнения строк:
    1. Начинаем с первых символов каждой строки. Если символы равны, переходим к следующей паре символов
    2. Когда находим первый отличающийся символ, строка с меньшим символом считается "меньше"
    3. Если одна из строк заканчивается раньше, то более короткая считается "меньше"

    Обратите внимание, что в Python сравнение останавливается, как только находится первое различие между символами на соответствующих позициях.
    Дальнейшее сравнение символов не требуется.


    Можно использовать для строк функции  min() и max() :
        print(max('tree', 'try', 'true'))
        print(min('cat', 'car', 'cape'))


'''
